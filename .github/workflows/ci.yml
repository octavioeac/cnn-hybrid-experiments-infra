name: Terraform GCP

on:
  push:
    branches: [ main ]
    paths:
      - 'apps/**'
      - 'infra/**'
      - '.github/workflows/terraform-gcp.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/**'
      - 'infra/**'
      - '.github/workflows/terraform-gcp.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  TF_BACKEND_BUCKET: tf-state-cnn-hybrid-experiments-infra
  TF_VARS_FILE_ABS: ${{ github.workspace }}/infra/envs/common.tfvars

jobs:
  plan:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tfdir:
          - infra/foundation
          - infra/experiments/cnn-fnn
          - infra/experiments/cnn-mlp
          - infra/experiments/cnn-mfcc
    steps:
      - uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          token_format: 'access_token'

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Sanity check backend bucket
        run: gcloud storage buckets describe gs://${{ env.TF_BACKEND_BUCKET }} --format='value(name)'

      - name: Terraform Init
        working-directory: ${{ matrix.tfdir }}
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
            -backend-config="prefix=${{ matrix.tfdir }}"

      - name: Terraform Fmt
        working-directory: ${{ matrix.tfdir }}
        run: terraform fmt -check

      - name: Terraform Validate
        working-directory: ${{ matrix.tfdir }}
        run: terraform validate

      - name: Terraform Plan
        working-directory: ${{ matrix.tfdir }}
        run: |
          if [ -f "${{ env.TF_VARS_FILE_ABS }}" ]; then
            terraform plan -input=false -out=tfplan -var-file="${{ env.TF_VARS_FILE_ABS }}"
          else
            terraform plan -input=false -out=tfplan
          fi
          terraform show -no-color tfplan > tfplan.txt

      - name: Comment plan
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const p = `${process.env.GITHUB_WORKSPACE}/${{ matrix.tfdir }}/tfplan.txt`;
            const body = fs.readFileSync(p,'utf8').slice(0, 60000);
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: `### Plan \`${{ matrix.tfdir }}\`\n\`\`\`hcl\n${body}\n\`\`\``
            });

  apply:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        tfdir:
          - infra/foundation
          - infra/experiments/cnn-fnn
          - infra/experiments/cnn-mlp
          - infra/experiments/cnn-mfcc
    steps:
      - uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          token_format: 'access_token'

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ${{ matrix.tfdir }}
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
            -backend-config="prefix=${{ matrix.tfdir }}/env/prod"

      - name: Terraform Plan (safety)
        working-directory: ${{ matrix.tfdir }}
        run: |
          if [ -f "${{ env.TF_VARS_FILE_ABS }}" ]; then
            terraform plan -input=false -out=tfplan -var-file="${{ env.TF_VARS_FILE_ABS }}"
          else
            terraform plan -input=false -out=tfplan
          fi

      - name: Terraform Apply
        working-directory: ${{ matrix.tfdir }}
        run: terraform apply -auto-approve tfplan


  build_apps:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [ kaggle-upload] # <--- list of projects
    steps:
      - uses: actions/checkout@v4

      - name: Auth to GCP (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          token_format: 'access_token'

      - uses: google-github-actions/setup-gcloud@v2

      - name: Resolve project & region (with fallbacks)
        run: |
          REGION="$(gcloud config get-value compute/region 2>/dev/null || true)"
          [ -z "$REGION" ] && REGION="${{ secrets.GCP_REGION }}"
          PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}"
          [ -z "$PROJECT_ID" ] && PROJECT_ID="$(gcloud config get-value project 2>/dev/null || true)"
          echo "REGION=$REGION" >> "$GITHUB_ENV"
          echo "PROJECT_ID=$PROJECT_ID" >> "$GITHUB_ENV"

      - name: Sanity check vars
        run: |
          echo "REGION=$REGION"
          echo "PROJECT_ID=$PROJECT_ID"
          if [ -z "$REGION" ] || [ -z "$PROJECT_ID" ]; then
            echo "REGION or PROJECT_ID is empty. Set secrets GCP_REGION / GCP_PROJECT_ID or gcloud defaults." >&2
            exit 1
          fi

      - name: Configure Docker
        run: gcloud auth configure-docker $REGION-docker.pkg.dev --quiet

      - name: Build & Push
        run: |
          BASE="$REGION-docker.pkg.dev/$PROJECT_ID/ml-experiments-cnn-hybrid-experiments-infra-us-central1/${{ matrix.app }}"
          IMAGE_URI="$BASE:${{ github.sha }}"
          echo "Building and pushing $IMAGE_URI"
          docker build -t "$IMAGE_URI" "apps/${{ matrix.app }}"
          docker push "$IMAGE_URI"
          docker tag "$IMAGE_URI" "$BASE:latest"
          docker push "$BASE:latest"
